#include <ArduinoMqttClient.h>
#include <WiFi.h>
#include <SPI.h>
#include <LoRa.h>
#define SCK 5
#define MISO 19
#define MOSI 27
#define SS 18
#define RST 14
#define DI0 26

union pack {
  uint8_t frame[16];
  float data[4];
} sdp;

///////please enter your sensitive data in the Secret tab/arduino_secrets.h
char ssid[] = "Iphone Romain";        // your network SSID
char pass[] = "30141921";    // your network password

struct packet {
  unsigned short freq : 8;
  unsigned int sb : 12;
  unsigned char sf : 4;
} packet_data;

WiFiClient wifiClient;
MqttClient mqttClient(wifiClient);

const char broker[] = "test.mosquitto.org";
int        port     = 1883;
const char topic[]  = "CR7";

void setup() {
  //Initialize serial and wait for port to open:
  Serial.begin(115200);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(100);
  // attempt to connect to Wifi network:
  Serial.print("Attempting to connect to SSID: ");
  Serial.println(ssid);
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    // failed, retry
    Serial.print(".");
    delay(5000);
  }

  Serial.println("You're connected to the network");
  Serial.println();

  Serial.print("Attempting to connect to the MQTT broker: ");
  Serial.println(broker);

  if (!mqttClient.connect(broker, port)) {
    Serial.print("MQTT connection failed! Error code = ");
    Serial.println(mqttClient.connectError());

    while (1);
  }

  Serial.println("You're connected to the MQTT broker!");
  Serial.println();

  // set the message receive callback
  mqttClient.onMessage(onMqttMessage);

  Serial.print("Subscribing to topic: ");
  Serial.println(topic);
  Serial.println();

  // subscribe to a topic
  mqttClient.subscribe(topic);

  packet_data.freq = 0;
  packet_data.sf = 0;
  packet_data.sb = 125; 
  byte serializedData[3];
  serializedData[0] = packet_data.freq;
  serializedData[1] = (packet_data.sb >> 4) & 0xFF;
  serializedData[2] = ((packet_data.sb & 0xF) << 4) | (packet_data.sf & 0xF);

  // Envoi des données via MQTT
  mqttClient.beginMessage(topic);
  mqttClient.write(serializedData, sizeof(serializedData));  // Utilisation de write pour envoyer les données brutes
  mqttClient.endMessage();



  // topics can be unsubscribed using:
  // mqttClient.unsubscribe(topic);

  Serial.print("Topic: ");
  Serial.println(topic);

  Serial.println();
}

void loop() {
  // call poll() regularly to allow the library to receive MQTT messages and
  // send MQTT keep alive which avoids being disconnected by the broker
  mqttClient.poll();
}

void loop_lora() {
  LoRa.beginPacket();
  sdp.data[0] = 12.0;
  sdp.data[1] = 2.0;
  LoRa.write(sdp.frame, 16);
  LoRa.endPacket();
  Serial.println("Paquet envoyé");
  delay(2000);
}

void onMqttMessage(int messageSize) {
  // we received a message, print out the topic and contents
  Serial.print("Received a message with topic '");
  Serial.print(mqttClient.messageTopic());
  Serial.print("', length ");
  Serial.print(messageSize);
  Serial.println(" bytes:");

  // use the Stream interface to print the contents
  while (mqttClient.available()) {  // Lecture des trois octets reçus
    byte serializedData[3];
    
    for (int i = 0; i < 3; i++) {
      serializedData[i] = mqttClient.read();  // Lire chaque octet successivement
    }

    // Désérialisation des données dans la structure packet_data
    packet_data.freq = serializedData[0];  // Premier octet contient freq
    packet_data.sb = (serializedData[1] << 4) | ((serializedData[2] >> 4) & 0x0F);  // Combinaison des bits pour sb
    packet_data.sf = serializedData[2] & 0x0F;  // Les 4 derniers bits de serializedData[2] contiennent sf

    Serial.println(packet_data.sb);
    Serial.println(packet_data.freq);
    Serial.println(packet_data.sf);

    pinMode(DI0, INPUT);
    SPI.begin(SCK,MISO,MOSI,SS);
    LoRa.setPins(SS,RST,DI0);
    if(!LoRa.begin((packet_data.freq + 868) * 1E6)) {
      Serial.println("KO");
      while(1);
    } else {
      Serial.println("OK");
    }
    LoRa.setSpreadingFactor(packet_data.sf + 7);
    LoRa.setSignalBandwidth((packet_data.sb + 50) * 1E3);

    while(1) {
      loop_lora();
    }
  }
}